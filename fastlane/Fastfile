# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

KEYSTORE_PATH = ENV["KEYSTORE_PATH"]
KEYSTORE_KEY_ALIAS = ENV["KEYSTORE_KEY_ALIAS"]
KEYSTORE_KEY_PASSWORD = ENV["KEYSTORE_KEY_PASSWORD"]
KEYSTORE_STORE_PASSWORD = ENV["KEYSTORE_STORE_PASSWORD"]
APK_OUTPUT_PATH = "./release.apk"
CACHE_PATH = "./.cache"
FIREBASE_APP_ID = ENV["FIREBASE_APP_ID"]
SERVICE_ACCOUNT_PATH = ENV["SERVICE_ACCOUNT_PATH"]
PULL_REQUEST_NUMBER = ENV["PULL_REQUEST_NUMBER"]
PULL_REQUEST_TITLE = ENV["PULL_REQUEST_TITLE"]
PUBLIC_BACKEND_URL = ENV["PUBLIC_BACKEND_URL"]


platform :android do

  desc "Deploy alpha version"
  lane :alpha do
    sh "pnpm install -g @ionic/cli"
    sh "pnpm install"
    sh "ionic cap sync android"
    sh "ionic cap build android --no-open"
    gradle(
          task: "clean bundleRelease",
          project_dir: 'android/',
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
            "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
            "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
            "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
          })
    aab_path = "android/app/build/outputs/bundle/release/app-release.aab"
    bundletool(
      ks_path: KEYSTORE_PATH,
      ks_password: KEYSTORE_STORE_PASSWORD,
      ks_key_alias: KEYSTORE_KEY_ALIAS,
      ks_key_alias_password: KEYSTORE_KEY_PASSWORD,
      bundletool_version: '1.10.0',
      aab_path: aab_path,
      apk_output_path: APK_OUTPUT_PATH,
      verbose: true,
      cache_path: CACHE_PATH
    )
  end
  
  lane :distribute do
    sh "pnpm install -g @ionic/cli"
    sh "pnpm install"
    sh "ionic cap sync android"
    sh "ionic cap build android --no-open"
    package = load_json(json_path: "./package.json")
    increment_version_code(
      gradle_file_path: "./android/app/build.gradle",
      version_code: PULL_REQUEST_NUMBER
    )
    increment_version_name(
      gradle_file_path: "./android/app/build.gradle",
      version_name: package['version'] + "-" + PULL_REQUEST_NUMBER
    )
    gradle(
          task: "clean bundleRelease",
          project_dir: 'android/',
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
            "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
            "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
            "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
          })
    aab_path = "android/app/build/outputs/bundle/release/app-release.aab"
    bundletool(
      bundletool_version: '1.16.0',
      ks_path: KEYSTORE_PATH,
      ks_password: KEYSTORE_STORE_PASSWORD,
      ks_key_alias: KEYSTORE_KEY_ALIAS,
      ks_key_alias_password: KEYSTORE_KEY_PASSWORD,
      aab_path: aab_path,
      apk_output_path: APK_OUTPUT_PATH,
      verbose: true,
      cache_path: CACHE_PATH
    )

    release = firebase_app_distribution(
        app: FIREBASE_APP_ID,
        service_credentials_file: SERVICE_ACCOUNT_PATH,
        android_artifact_path: APK_OUTPUT_PATH,
        groups: 'dyne',
        release_notes: "#{PULL_REQUEST_TITLE}"
    )
  end
    
  lane :play do
      sh "pnpm install -g @ionic/cli"
      sh "pnpm install"
      sh "ionic cap sync android"
      sh "ionic cap build android --no-open"
      package = load_json(json_path: "./package.json")
      # internal_latest_version_code = google_play_track_version_codes(
      #   track: 'internal', 
      #   json_key:"#{SERVICE_ACCOUNT_PATH}",
      #   package_name:"com.didroom.wallet"
      # )
      increment_version_code(
        # gradle_file_path: "./android/app/build.gradle",
        # version_code: internal_latest_version_code.max + 1
      )
      increment_version_name(
        gradle_file_path: "./android/app/build.gradle",
        version_name: package['version'] + "-alpha"
      )
      gradle(
        task: "clean bundleRelease",
        project_dir: 'android/',
        print_command: false,
        properties: {
          "android.injected.signing.store.file" => "#{KEYSTORE_PATH}",
          "android.injected.signing.store.password" => "#{KEYSTORE_STORE_PASSWORD}",
          "android.injected.signing.key.alias" => "#{KEYSTORE_KEY_ALIAS}",
          "android.injected.signing.key.password" => "#{KEYSTORE_KEY_PASSWORD}",
        }
      )

      release = upload_to_play_store(
        json_key:"#{SERVICE_ACCOUNT_PATH}",
        package_name:"com.didroom.verifier",
        aab:"android/app/build/outputs/bundle/release/app-release.aab",
        track: 'internal',
        metadata_path: "./fastlane/metadata/android",
        skip_upload_apk: true,
        release_status: 'draft'
      )
    end
end
